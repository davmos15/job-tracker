rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if document belongs to user
    function belongsToUser() {
      return isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // User documents
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && 
        // Prevent changing userId
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['id']));
      allow delete: if false; // Users cannot delete their profile
    }
    
    // Application documents
    match /applications/{applicationId} {
      allow read: if belongsToUser();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['title', 'company', 'dateApplied', 'status']);
      allow update: if belongsToUser() &&
        // Prevent changing userId
        request.resource.data.userId == resource.data.userId;
      allow delete: if belongsToUser();
    }
    
    // User preferences
    match /preferences/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}